{"version":3,"sources":["index.js"],"names":["dateSelect","barDataset","songNames","svg","countriesList","countriesName","Countries","slice","sort","dataset","barPadding","margin","top","right","bottom","left","w","h","y","d3","scaleBand","range","padding","x","scaleLinear","loadInitialData","parseInt","csv","then","data","initSVG","select","append","attr","domain","max","d","length","selectAll","enter","bandwidth","call","axisBottom","axisLeft","tickSize","tickFormat","text","i","index","streams","updateSVG","fullSongNames","artistNames","remove","idx","window","sliderDate","updateBars","bars","merge","updateGraph","filtered","arrayObj","Streams","name","substring","getDateArray","start","end","dt","arr","Array","Date","date","dateString","getFullYear","getMonth","getDate","push","setDate","dateArr","countryDropdown","insert","on","country","property","indexOf","fileName","filter","dateDropdown","toUpperCase","weeks2019","sliderTime","gTime","onload","map","sliderBottom","min","step","width","timeFormat","tickValues","displayValue","val","console","log","localStorage","getItem","value"],"mappings":"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","file":"src.1575de14.js","sourceRoot":"../src","sourcesContent":["\n// globals\nvar countriesList = ['ca', 'dk', 'gr', 'is', 'mx', 'ph', 'sv',\n    'ar', 'ch', 'do', 'gt', 'it', 'my', 'pl', 'th',\n    'at', 'cl', 'ec', 'hk', 'jp', 'pt', 'tr',\n    'au', 'co', 'hn', 'nl', 'py', 'tw',\n    'be', 'cr', 'es', 'hu', 'no', 'ro', 'us',\n    'fi', 'id', 'nz', 'se', 'uy',\n    'bo', 'cz', 'fr', 'ie', 'pa', 'sg', 'vn',\n    'br', 'de', 'gb', 'il', 'pe', 'sk', 'global'];\n\nvar countriesName = ['Canada', 'Denmark', 'Greece', 'Iceland', 'Mexico', 'Philippines', 'El Salvador',\n    'Argentina', 'Switzerland', 'Dominican Republic', 'Guatemala', 'Italy', 'Malaysia', 'Poland', 'Thailand',\n    'Austria', 'Chile', 'Ecuador', 'Hong Kong', 'Japan', 'Portugal', 'Turkey',\n    'Australia', 'Columbia', 'Honduras', 'Netherlands', 'Paraguay', 'Taiwan',\n    'Belgium', 'Costa Rica', 'Spain', 'Hungary', 'Norway', 'Romania', 'United States',\n    'Finland', 'Indonesia', 'New Zealand', 'Sweden', 'Uruguay',\n    'Bolivia', 'Czech Republic', 'France', 'Ireland', 'Panama', 'Singapore', 'Vietnam',\n    'Brazil', 'Germany', 'United Kingdom', 'Israel', 'Peru', 'Slovakia', 'global'];\nvar Countries = (countriesName).slice(0).sort();\n\nvar dateSelect;\nvar dataset = [];\n\nvar barPadding = 1;\nvar margin = {\n    top: 15,\n    right: 25,\n    bottom: 30,\n    left: 10\n};\nvar w = 1200 - margin.left - margin.right;\nvar h = 612 - margin.top - margin.bottom;\n\n//set x and y ranges\nvar y = d3.scaleBand()\n    .range([h, 0])\n    .padding(0.1);\n\nvar x = d3.scaleLinear()\n    .range([0, w]);\n\n// initial -- hardcoded data\nvar barDataset;\nvar songNames;\n\nvar svg;\n\n//--------------------------------// end globals\n\nfunction loadInitialData() {\n    // TODO -- Not hardcode this (make sure this is correct info)!!\n    songNames = [\"Sunflower - Spider-Man: Into the Spider-Verse\", \"thank u, next\", \"Wow.\", \"Without Me\", \"Taki Taki (with Selena Gomez, Ozuna & Cardi B)\", \"Calma - Remix\", \"Sweet but Psycho\", \"MIA (feat. Drake)\", \"High Hopes\", \"Happier\"];\n    barDataset = [\n        [parseInt(\"4323160\"), '10'],\n        [parseInt(\"4275439\"), '9'],\n        [parseInt(\"3947420\"), '8'],\n        [parseInt(\"3307383\"), '7'],\n        [parseInt(\"3188386\"), '6'],\n        [parseInt(\"2896056\"), '5'],\n        [parseInt(\"2642425\"), '4'],\n        [parseInt(\"2598097\"), '3'],\n        [parseInt(\"2512089\"), '2'],\n        [parseInt(\"2419735\"), '1']];\n    // TODO -- add tooltip stuff for initial load too\n\n    // load globl data\n    d3.csv(\"streamsglobal10.csv\").then(function (data) {\n        dataset = data;\n    });\n}\n\nfunction initSVG() {\n    svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"width\", w + margin.left + margin.right)\n        .attr(\"height\", h + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\",\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n    // Scale the range of the data in the domains\n    x.domain([0, d3.max(barDataset, function (d) { return d[0]; })])\n    y.domain(d3.range(1, barDataset.length + 1));\n\n    //Select…\n    var bars = svg.selectAll(\"rect\")\n        .data(barDataset);\n\n    bars.enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"width\", function (d) { return x(d[0]); })\n        .attr(\"y\", function (d) {\n            return y(d[1]);\n        })\n        .attr(\"fill\", function () {\n            return \"rgb(30, 215, 96)\";\n        })\n        .attr(\"height\", y.bandwidth());\n\n    // add the x Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + h + \")\")\n        .call(d3.axisBottom(x));\n           // .ticks(10));\n\n    // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y).tickSize(0).tickFormat(\"\"));\n\n\n    svg.selectAll(\"text.value\")\n        .data(barDataset)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n            return songNames[parseInt(d[1]) - 1];\n        })\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"y\", function (d, i) {\n            return (9 - i) * (h / barDataset.length) + 27;\n        })\n        .attr(\"x\", function (d) {\n            var index = d[1];\n            var streams = barDataset[index - 1][0];\n            return x(streams) - 8;\n        })\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", \"14px\")\n        .attr(\"font-weight\", 550)\n        .attr(\"fill\", \"black\");\n}\n\nloadInitialData();\ninitSVG();\n\n\nfunction updateSVG(fullSongNames, barDataset, artistNames, songNames) {\n    svg.selectAll(\"text\").remove();\n\n    // update and add the x Axis\n    svg.selectAll(\"g\").remove();\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + h + \")\")\n        .call(d3.axisBottom(x));\n\n    // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y).tickSize(0).tickFormat(\"\"));\n\n    svg.selectAll(\"title\").remove();\n    svg.selectAll(\"rect\")\n        .append(\"title\")\n        .text(function (d) {\n            var idx = 10 - parseInt(d[1]);\n            // NOTE: date is slider date (not dropdown date)\n            return \"\\\"\" + fullSongNames[idx] + \"\\\" by \" + artistNames[idx] + \": \" + d[0] + \" streams on \" + window[sliderDate];\n        })\n\n\n\n\n   var labels = svg.selectAll(\"text.value\")\n        .data(barDataset)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n            return songNames[parseInt(d[1]) - 1];\n        })\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"y\", function (d, i) {\n            return (9 - i) * (h / barDataset.length) + 27;\n        })\n        .attr(\"x\", function (d) {\n            var index = d[1];\n            var streams = barDataset[index - 1][0];\n            return x(streams) - 8;\n        })\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", \"14px\")\n        .attr(\"font-weight\", 550)\n        .attr(\"fill\", \"black\")\n}\n\nfunction updateBars(barDataset) {\n    var bars = svg.selectAll(\"rect\")\n        .data(barDataset);\n\n    bars.enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"width\", function (d) { return x(d[0]); })\n        .attr(\"y\", function (d) {\n            return y(d[1]);\n        })\n        .attr(\"fill\", function (d) {\n            return \"rgb(0, 0, \" + (d[0] * 10) + \")\";\n        })\n        .attr(\"height\", y.bandwidth())\n        .merge(bars)\t//Update…\n        .attr(\"x\", function (d, i) {\n            return x(d[1]);\n        })\n        .attr(\"y\", function (d) {\n            return y(d[1]);\n        })\n        .attr(\"width\", function (d) { return x(d[0]); })\n        .attr(\"height\", y.bandwidth());\n}\n\n\nfunction updateGraph(filtered) {\n    var barDataset = [[]];\n    var songNames = [''];\n    var fullSongNames = [''];\n    var artistNames = [''];\n    for (var i = 0; i < filtered.length; i++) {\n        var arrayObj = [parseInt(filtered[i].Streams), (10 - i) + \"\"];\n        var name = filtered[i]['Track Name'];\n        fullSongNames[i] = name;\n        if (filtered[i]['Track Name'].length > 30) {\n            name = name.substring(0, 31) + \"...\";\n        }\n        songNames[i] = name;\n        artistNames[i] = filtered[i]['Artist'];\n        barDataset[i] = arrayObj;\n    }\n\n    // Scale the range of the data in the domains\n    x.domain([0, d3.max(barDataset, function (d) { return d[0]; })])\n    y.domain(d3.range(1, barDataset.length + 1));\n\n    \n    updateBars(barDataset)\n    updateSVG(fullSongNames, barDataset, artistNames, songNames);\n}\n\n\n\n\nvar getDateArray = function (start, end) {\n    var arr = new Array();\n    var dt = new Date(start);\n    while (dt <= end) {\n        var date = new Date(dt);\n\n        var dateString = date.getFullYear() + \"-\";\n        if (date.getMonth() < 9) {\n            dateString = dateString + \"0\";\n        }\n        dateString = dateString + (date.getMonth() + 1) + \"-\";\n        if (date.getDate() < 10) {\n            dateString = dateString + \"0\";\n        }\n        dateString = dateString + date.getDate();\n        arr.push(dateString);\n        dt.setDate(dt.getDate() + 1);\n    }\n    return arr;\n}\nvar dateArr = getDateArray(new Date(\"2019-01-01\"), new Date(\"2020-01-01\"));\ndateSelect = dateArr[0];\n\n// update graph based on country dropdown\nvar countryDropdown = d3.select(\"#vis-container-country\")\n    .insert(\"select\", \"svg\")\n    .on(\"change\", function () {\n        var country = d3.select(this).property('value');\n\n\n        var index = countriesName.indexOf(country);\n        var fileName = \"streams\" + countriesList[index] + \"10.csv\";\n\n        // load new csv, and update graph\n        d3.csv(fileName).then(function (data) {\n            dataset = data;\n            var filtered = data.filter(function (d) {\n                return d['date'] === dateSelect;\n            })\n            updateGraph(filtered);\n        });\n    });\n\n// update graph based on date dropdown\nvar dateDropdown = d3.select(\"#vis-container-date\")\n    .insert(\"select\", \"svg\")\n    .on(\"change\", function () {\n        dateSelect = d3.select(this).property('value');\n\n        var filtered = dataset.filter(function (d) {\n            return d['date'] === dateSelect;\n        })\n        updateGraph(filtered);\n    });\n\n// populate the country dropdown\ncountryDropdown.selectAll(\"option\")\n    .data(Countries)\n    .enter().append(\"option\")\n    .attr(\"value\", function (d) { return d; })\n    .attr(\"selected\", function (d) {\n        return d === \"Global\";\n    })\n    .text(function (d) {\n        return d[0].toUpperCase() + d.slice(1, d.length); // capitalize 1st letter\n    });\n\n// populate the date dropdown\ndateDropdown.selectAll(\"option\")\n    .data(dateArr)\n    .enter().append(\"option\")\n    .attr(\"value\", function (d) { return d; })\n    .text(function (d) {\n        return d;\n    });\n\n// SLIDER STUFF !!\n\"use strict\";\n(function () {\n\n    // MODULE GLOBAL VARIABLES AND HELPER FUNCTIONS CAN BE PLACED\n    // HERE\n    var weeks2019;\n    var sliderTime;\n    var gTime;\n\n    window.onload = function () {\n        initSlider();\n    };\n\n    function playSlider() {\n\n    }\n\n    // Code inspired/provided by https://github.com/johnwalley/d3-simple-slider v1.5.4 Copyright 2019 John Walley\n    function initSlider() {\n        weeks2019 = d3.range(0, 53).map(function (d) {\n            return new Date(2019, 0, 1 + 7 * d);\n        });\n/*\n\nvar playButton = d3.select(\"#play-button\");\nvar moving = false;\nvar currentValue = 0;\nvar targetValue = 1100 - margin.left - margin.right;\nplayButton\n.on(\"click\", function() {\nvar button = d3.select(this);\nif (button.text() == \"Pause\") {\n  moving = false;\n  clearInterval(timer);\n  // timer = 0;\n  button.text(\"Play\");\n} else {\n  moving = true;\n  timer = setInterval(step, 100);\n  button.text(\"Pause\");\n}\nconsole.log(\"Slider moving: \" + moving);\n})\n\nfunction update(h) {\n  // update position and text of label according to slider scale\n  d3.select('div#slider').attr(\"cx\", x(h));\n  \n \n}\n\n\nfunction step() {\n  update(x.invert(currentValue));\n  currentValue = currentValue + (targetValue/151);\n  if (currentValue > targetValue) {\n    moving = false;\n    currentValue = 0;\n    clearInterval(timer);\n    // timer = 0;\n    playButton.text(\"Play\");\n    console.log(\"Slider moving: \" + moving);\n  }\n}\n*/\n\n        sliderTime = d3\n            .sliderBottom()\n            .min(d3.min(weeks2019))\n            .max(d3.max(weeks2019))\n            .step(28)\n            .width(1240 - margin.left - margin.right)\n            .tickFormat(d3.timeFormat('%m-%d'))\n            .tickValues(weeks2019)\n            .displayValue(false)\n            .on('onchange', val => {\n                d3.select('p#value').text(d3.timeFormat('%m-%d-%Y')(val));\n                window[sliderDate] = d3.timeFormat('%Y-%m-%d')(val);\n\n                dateSelect = d3.timeFormat('%Y-%m-%d')(val);\n                console.log(localStorage.getItem('currDate'));\n\n                var filtered = dataset.filter(function (d) {\n                    for (var i = 0; i < dataset.length; i++) {\n                        return d['date'] === dateSelect;\n                    }\n                })\n\n                updateGraph(filtered)\n            });\n\n        gTime = d3\n            .select('div#slider')\n            .append('svg') \n            .attr('width', 1350 - margin.left - margin.right)\n            .attr('height', 132 - margin.top - margin.bottom)\n            .append('g')\n            .attr('transform', 'translate(30,30)');\n\n        gTime.call(sliderTime);\n\n        gTime.selectAll(\"text\").attr(\"dx\", \"-10px\").attr(\"dy\", \"-16px\");\n\n        //initializes date shown on screen\n        d3.select('p#value').text(d3.timeFormat('%m-%d-%Y')(sliderTime.value()));\n        sliderDate = d3.timeFormat('%Y-%m-%d')(sliderTime.value());\n\n    }\n})();\n"]}